{"version":3,"sources":["Components/Footer/index.js","Components/NavTab/index.js","Pages/Home.js","Pages/Saved.js","Pages/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","id","Row","Col","href","target","rel","icon","faEnvelopeOpen","faLinkedin","faGithub","NavTab","Navbar","collapseOnSelect","expand","Brand","to","Toggle","aria-controls","Collapse","Nav","Item","Home","useState","articles","setArticles","useEffect","axios","get","then","response","console","log","catch","err","Container","Button","onClick","res","data","length","Saved","NoMatch","fluid","size","Jumbotron","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wWAuBeA,MAhBf,WACM,OACE,yBAAKC,UAAU,eAAeC,GAAG,YAC7B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKH,UAAU,aACX,uBAAGI,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAA3D,yBAEJ,kBAACH,EAAA,EAAD,CAAKH,UAAU,cACX,uBAAGI,KAAI,oCAAuCC,OAAO,QAAO,kBAAC,IAAD,CAAiBE,KAAMC,IAAgBR,UAAU,YAC7G,uBAAGI,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBC,KAAME,IAAYT,UAAU,YACtJ,uBAAGI,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBC,KAAMG,IAAUV,UAAU,gB,sBCO/HW,MAnBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKb,GAAG,YACpC,kBAACW,EAAA,EAAOG,MAAR,CAAcd,GAAG,WAAU,kBAAC,IAAD,CAAMe,GAAG,IAAIf,GAAG,UAAhB,oBAC3B,kBAACW,EAAA,EAAOK,OAAR,CAAeC,gBAAc,oBAA7B,QACA,kBAACN,EAAA,EAAOO,SAAR,CAAiBlB,GAAG,oBAChB,kBAACmB,EAAA,EAAD,CAAKpB,UAAU,WACX,kBAACoB,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAML,GAAG,IAAIhB,UAAU,YAAvB,SAEJ,kBAACoB,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAML,GAAG,SAAShB,UAAU,YAA5B,uB,iDCkCTsB,MA5Cf,WAAe,MAEqBC,mBAAS,IAF9B,mBAEJC,EAFI,KAEMC,EAFN,KAqBX,OAdAC,qBAAU,WAGNC,IAAMC,IAAI,gCACTC,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,EAAW,2BACxCG,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,SAU1B,yBAAKjC,GAAG,kBACR,kBAACkC,EAAA,EAAD,CAAWlC,GAAG,iBACV,4CACA,kBAACmC,EAAA,EAAD,CAAQC,QAXG,WACfV,IAAMC,IAAI,kCACTC,MAAK,SAAAS,GACFb,EAAYa,EAAIC,SAEnBN,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QAMtB,gBACA,4BAAKV,GACL,0IACCA,EAASgB,OACN,kBAACL,EAAA,EAAD,MAQA,wDCjCDM,MARf,WACI,OACI,+B,QCaOC,MAdf,WACE,OACE,kBAACP,EAAA,EAAD,CAAWQ,OAAK,GACd,kBAACzC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKyC,KAAK,SACR,kBAACC,EAAA,EAAD,KACE,uD,MCiBGC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,SAASC,UAAWR,IACtC,kBAAC,IAAD,CAAOQ,UAAWP,KAEpB,kBAAC,EAAD,SCRYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.72d09615.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nimport { Row, Col} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLinkedin, faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faEnvelopeOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Footer(){  \r\n      return (\r\n        <div className=\"fixed-bottom\" id=\"myFooter\">            \r\n            <Row>            \r\n                <Col className=\"text-left\">      \r\n                    <a href=\"https://www.stephanielake.io\" target=\"_blank\" rel=\"noopener noreferrer\">www.stephanielake.io</a>   \r\n                </Col>                  \r\n                <Col className=\"text-right\"> \r\n                    <a href={`mailto:stephanie.c.lake@gmail.com`} target=\"_top\"><FontAwesomeIcon icon={faEnvelopeOpen} className=\"social\"/></a> \r\n                    <a href=\"https://www.linkedin.com/in/stephanie-lake-43b89140/\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faLinkedin} className=\"social\"/></a>\r\n                    <a href=\"https://github.com/sjconst\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faGithub} className=\"social\"/></a> \r\n                </Col>\r\n            </Row>                \r\n        </div>\r\n    )\r\n};\r\nexport default Footer;","import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction NavTab() {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"sm\" id=\"myNavbar\">\r\n            <Navbar.Brand id=\"myBrand\"><Link to=\"/\" id=\"myLink\">Article Scraper</Link></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\">Menu</Navbar.Toggle>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ml-auto\">\r\n                    <Nav.Item>\r\n                        <Link to=\"/\" className=\"nav-link\" >Home</Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Link to=\"/Saved\" className=\"nav-link\" >Saved Articles</Link>\r\n                    </Nav.Item>                    \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavTab;","import React, { useState, useEffect} from \"react\";\r\nimport \"./index.css\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\nimport API from \"../Utils/API\";\r\nimport axios from \"axios\";\r\n\r\nfunction Home(){\r\n    //dynamically render rows from db\r\n    const [articles, setArticles] = useState([]);\r\n    // const [ headlines, setHeadlines] = useState(\"\");\r\n    // const [ URL, setURL] = useState(\"\");\r\n    // const [ summaries, setSummaries] = useState(\"\");\r\n    //set to do once per cache/day? or on window load?\r\n    useEffect(() => {\r\n        // API.scrapeArticles()\r\n        // .then(loadArticles())\r\n        axios.get(\"http://localhost:3001/scrape\")\r\n        .then(response => console.log(response + \"this is the response\"))\r\n        .catch(err => console.log(err));\r\n    });\r\n    let loadArticles = () => {\r\n        axios.get(\"http://localhost:3001/articles\")\r\n        .then(res => {\r\n            setArticles(res.data);\r\n        })\r\n        .catch(err => console.log(err))\r\n    };    \r\n    return (\r\n        <div id=\"homeBackground\">\r\n        <Container id=\"homeContainer\">\r\n            <h1>News Scraper</h1>\r\n            <Button onClick={loadArticles}>Get articles</Button>\r\n            <h5>{articles}</h5>\r\n            <h4>Automatically grab the latest headlines. Build a list of saved articles. Comment and save notes as needed.</h4>\r\n            {articles.length ? (\r\n                <Container>\r\n                    {/* {articles.map(\r\n                        article => {                           \r\n                            {article._id}                            \r\n                        }\r\n                    )} */}\r\n                </Container>  \r\n            ) : (\r\n                <h3>No Results to Display</h3>\r\n            )}\r\n        </Container>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nfunction Saved(){\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Saved;","import React from \"react\";\r\nimport { Jumbotron, Col, Row, Container} from \"react-bootstrap\";\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>404 Page Not Found</h1>            \r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NoMatch;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Footer from \"./Components/Footer\";\nimport NavTab from \"./Components/NavTab\";\nimport Home from \"./Pages/Home\";\nimport Saved from \"./Pages/Saved\";\nimport NoMatch from \"./Pages/NoMatch\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavTab />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/Saved\" component={Saved} />          \n          <Route component={NoMatch} />\n        </Switch>    \n        <Footer />    \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}